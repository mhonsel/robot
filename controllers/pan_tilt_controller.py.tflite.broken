import cv2
import sys
import time

from tflite_support.task import core
from tflite_support.task import processor
from tflite_support.task import vision
import utils


from controllers.pid import PID

class PanTiltController:
    def __init__(self, supervisor, model):
        self.supervisor = supervisor
        self.name = 'Pan Tilt'

        if self.supervisor.has_vision:
            # calculate the center of the frame as this is where we will
            # try to keep the object
            (H, W) = self.supervisor.image.shape[:2]
            self.center_x = W // 2
            self.center_y = H // 2

            # Initialize the object detection model
            base_options = core.BaseOptions(
                    file_name=model, use_coral=True, num_threads=4)
            detection_options = processor.DetectionOptions(
                    max_results=3, score_threshold=0.3)
            options = vision.ObjectDetectorOptions(
                    base_options=base_options, detection_options=detection_options)
            self.detector = vision.ObjectDetector.create_from_options(options)

            # create the pan/tilt PIDs and initialize them
            self.pan_pid = PID(kP=0.035, kI=0.0004, kD=0.00001)
            self.pan_pid.initialize()
            self.tilt_pid = PID(kP=0.06, kI=0.0006, kD=0.00002)
            self.tilt_pid.initialize()

    def update(self):
        # only run when there's an image from the camera
        if self.supervisor.has_vision:
            # Convert the image from BGR to RGB as required by the TFLite model.
            rgb_image = cv2.cvtColor(self.supervisor.image, cv2.COLOR_BGR2RGB)

            # Create a TensorImage object from the RGB image.
            input_tensor = vision.TensorImage.create_from_array(rgb_image)

            # Run object detection estimation using the model.
            detection_result = detector.detect(input_tensor)

            # Draw keypoints and edges on input image
            self.supervisor.image = utils.visualize.draw_detection_result(rgb_image, detection_result)

            # check to see if object was found
            if len(detection_result) > 0:
                # extract the bounding box coordinates of the object and
                # use the coordinates to determine the center
                bbox = detection_result[0].bounding_box
                obj_x = int(bbox.origin_x + (bbox.width / 2.0))
                obj_y = int(bbox.origin_y + (bbox.height / 2.0))

                # update the pid controllers
                pan_error = self.center_x - obj_x 
                self.supervisor.pan = self.pan_pid.update(pan_error)
                tilt_error = self.center_y - obj_y 
                self.supervisor.tilt = self.tilt_pid.update(tilt_error)

            # otherwise no objects were found
            else:
                self.supervisor.pan = self.pan_pid.update(0)
                self.supervisor.tilt = self.tilt_pid.update(0)
